import 'byte.grm' as bytelib;   # copy this file from grammars/byte.grm
Letter = bytelib.kAlpha;        # kAlpha is defined in byte.grm
Sigma = Letter | "'";           # alphabet also includes stress mark
Alphabet = bytelib.kBytes | "'";
Vowel = "a" | "e" | "i" | "o" | "u" | "A" | "E" | "I" | "O" | "U";
Consonant = Letter - Vowel;
Nucleus = Vowel+;

# YOU WILL FILL IN THE REST

# Add stress before the nucleus if:
# 1. either BOS and optional consonant OR a previous unstressed nucleus is to the left
# 2. future unstressed nucleus is to the right
export Stress1 = CDRewrite["":"'", (("[BOS]" (Consonant+)?) | (Consonant Nucleus Consonant+)), Nucleus Consonant+ Nucleus, Sigma*, 'ltr', 'obl'];

# If the word is not stressed, add stress to first nucleus
export Stress2 = CDRewrite["":"'", "[BOS]" (Letter | "^" | "~")*, Nucleus (Letter | "^" | "~")* "[EOS]", Sigma*, 'ltr', 'obl'];

# Compose
export Stress = Optimize[Stress1 @ Stress2];
export InvertStress = Invert[Stress];

# Apply stress to sentence
export StressWords = CDRewrite[Stress, ("[BOS]" | (bytelib.kPunct - "'") | bytelib.kSpace), ("[EOS]" | (bytelib.kPunct | bytelib.kSpace), bytelib.kBytes*, 'sim', 'obl'];

# Replace vowel Y's with filler symbols when followed by EOS or consonants only
export VoweledYs = CDRewrite[("y": "^")|("Y": "~"), "", ("[EOS]" | Consonant), Sigma*, 'sim', 'obl'];

# Force replace ~ and ^ back to Y's
export UnvoweledYs = CDRewrite[("^":"y")|("~": "Y"), "", ("[EOS]" | Consonant), Sigma*, 'sim', 'obl'];

# Compose all
export Stressy = Optimize[VoweledYs @ Stress @ UnvoweledYs];
