import 'byte.grm' as bytelib;                       # load a simple grammar (.grm)
ByteSigma = (bytelib.kSpace | bytelib.kGraph);      # printable characters
ByteSigmaStar = Optimize[ByteSigma*];

export LM = LoadFst['entrain.fst'];                 # load trigram language model (.fst)
vocab = SymbolTable['entrain.sym'];                 # load model's symbol table (.sym)

# YOU WILL FILL IN THE REST

OldSpell = Optimize[StringFile['entrain.alpha', vocab, byte]];
RandomChar = bytelib.kGraph <4.54>;
RandomWord = Optimize[(RandomChar (RandomChar <0.1>)* ) <2.3>];
SpellOOV = "<unk>".vocab : RandomWord;
Spell = Optimize[StringFile['entrain.alpha', vocab, byte]] | SpellOOV;

# Optimize and transduce from byte to vocab to form words
export FormWord = Optimize[StringFile['entrain.alpha', byte, vocab]];

# Complete the input string at random
export RandomComplete = CDRewrite["":ByteSigma*, "", "[EOS]", ByteSigmaStar, 'sim', 'obl'];

# Get the outputs from Spell FST to get all possible spellings
export PossibleSpelling = Project[Spell, 'output'];

# Generate a random word by composing all the above FSTs
export CompleteWord = RandomComplete @ PossibleSpelling @ FormWord @ LM;

# Delete Spaces and Spell Text
export DelSpaces = CDRewrite[" ":"", "", "", ByteSigmaStar, 'sim', 'obl'];
export SpellText = (Spell ("".vocab : " ".byte))*;

# Print text using the Spell FST
export PrintText = (OldSpell ("".vocab : " ".byte) | ("<unk>".vocab:"<unk>") ("".vocab : " ".byte))*;

# Invert the LM defined above
export InvLM = Invert[LM];
export InvSpellText = Optimize[Invert[SpellText]];
export InvDelSpaces = Optimize[Invert[DelSpaces]];