import 'byte.grm' as bytelib;        # load a simple grammar (.grm)
ByteSigma = (bytelib.kSpace | bytelib.kGraph);  # printable characters
ByteSigmaStar = Optimize[ByteSigma*];

export LM = LoadFst['entrain.fst'];  # load trigram language model (.fst)
vocab = SymbolTable['entrain.sym'];  # load model's symbol table (.sym)
Spell = Optimize[StringFile['entrain.alpha', vocab, byte]];

# YOU WILL FILL IN THE REST

OldSpell = Optimize[StringFile['entrain.alpha', vocab, byte]];
RandomChar = bytelib.kGraph <4.54>;
RandomWord = Optimize[(RandomChar (RandomChar <0.1>)* ) <2.3>];
SpellOOV = "<unk>".vocab : RandomWord;
Spell = Optimize[StringFile['entrain.alpha', vocab, byte]] | SpellOOV;

# Transduce byte to vocab
export FormWord = Optimize[StringFile['entrain.alpha', byte, vocab]];

# Randomly complete the user input letters
export RandomComplete = CDRewrite["":ByteSigma*, "", "[EOS]", ByteSigmaStar, 'sim', 'obl'];

# FSA that accept all possible spells.
export PossibleSpelling = Project[Spell, 'output'];

# Form a random word
export CompleteWord = RandomComplete @ PossibleSpelling @ FormWord @ LM;
